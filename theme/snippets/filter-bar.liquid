{%- liquid
  assign color_scheme = color_scheme
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign request_path = request.path | default: '#'
-%}

<filter-drawer-root class="text-{{ color_scheme }}">
  <button
    data-trigger="filter-drawer"
    type="button"
    aria-expanded="false"
    class="inline-block text-title-small font-display"
  >
    <span class="flex gap-8 items-center">
      {{- 'filter-sort-icon.svg' | inline_asset_content -}}
      {{ 'sections.collection.filters.filter_and_sort' | t -}}
    </span>
  </button>

  <!-- Filter drawer -->
  <div
    data-target="filter-drawer"
    class="fixed top-0 left-0 h-full w-340 lg:w-400 bg-white hidden"
    style="z-index: 5000"
    role="dialog"
    aria-modal="true"
    aria-expanded="false"
  >
    <div class="flex flex-col h-full">
      <!-- Header -->
      <div class="flex items-center justify-between p-24 border-b border-gray-200">
        <h3 class="font-display filter-drawer-title">{{ 'sections.collection.filters.filters' | t }}</h3>
        <button
          data-trigger="filter-drawer"
          type="button"
          class="flex h-40 items-center justify-center"
        >
          <span class="sr-only">{{ 'sections.collection.filters.close' | t }}</span>
          <ion-icon name="close" aria-hidden="true" class="w-24 h-24"></ion-icon>
        </button>
      </div>

      <!-- Filters Form -->
      <form
        id="filter-form-stack"
        hx-get="{{ request_path }}"
        hx-on="htmx:configRequest: updateSortFilters(event)"
        hx-target="#results"
        hx-select="#results"
        hx-swap="outerHTML"
        hx-swap-oob="true"
        class="flex-1 overflow-y-auto"
      >
        <div class="px-24">
          {% for filter in results.filters %}
            <details
              class="filter-section mb-16"
              open
            >
              <summary class="flex items-center justify-between py-8 list-none cursor-pointer">
                <h4 class="filter-title font-display">{{ filter.label }}</h4>
                <ion-icon
                  name="chevron-down-outline"
                  aria-label="{{ 'general.accordion.toggle' | t }}"
                  class="h-20 w-20 transition-transform"
                ></ion-icon>
              </summary>
              <div class="filter-options mt-4">
                {% if filter.type == 'list' %}
                  <div class="flex flex-col">
                    <!-- "All" option -->
                    <label class="flex items-center flex-nowrap filter-checkbox-height">
                      <input
                        type="checkbox"
                        class="size-20 mr-12 rounded border-gray-300"
                        name="{{ filter.param_name }}_all"
                        value="all"
                        {% if filter.active_values.size == 0 %}
                          checked
                        {% endif %}
                      >
                      <span class="font-display text-nowrap">All</span>
                    </label>
                    {% for option in filter.values %}
                      {% render 'filter-input', filter: filter, option: option %}
                    {% endfor %}
                  </div>
                {% else %}
                  {% render 'filter-input', filter: filter %}
                {% endif %}
              </div>
            </details>
          {% endfor %}
        </div>
      </form>

      <div class="p-24">
        <button
          type="submit"
          form="filter-form-stack"
          class="w-full py-12 px-24 bg-black text-white text-body-large font-display"
        >
          View results
        </button>
      </div>
    </div>
  </div>

  <!-- Active filters -->
  <section aria-labelledby="filter-heading">
    <h2 id="filter-heading" class="sr-only">{{ 'sections.collection.filters.filters' | t }}</h2>

    <!-- Active filter list -->
    {% liquid
      assign active_filter_count = 0
      assign active_price_range = false
      for filter in results.filters
        if filter.type == 'price_range'
          if filter.min_value.value or filter.max_value.value
            assign active_filter_count = active_filter_count | plus: 1
            assign active_price_range = true
          endif
        else
          if filter.active_values.size > 0
            assign active_filter_count = active_filter_count | plus: 1
          endif
        endif
      endfor
    %}

    <div id="active-filters" hx-swap-oob="true">
      {% if active_filter_count > 0 %}
        <div class="bg-{{ color_scheme }} py-12 sm:flex sm:justify-between sm:items-center">
          <span class="sr-only">{{ 'sections.collection.filters.active' | t }}</span>
          <div class="-m-4 flex flex-wrap items-center">
            {% for filter in results.filters %}
              {% if filter.type == 'price_range' %}
                {% if active_price_range %}
                  {% render 'filter-tag', filter: filter, color_scheme: color_scheme %}
                {% endif %}
              {% else %}
                {% for value in filter.active_values %}
                  {% render 'filter-tag', filter: filter, value: value, color_scheme: color_scheme %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          </div>
          <div class="clear-all">
            <a
              href="{{ results.url }}"
              class="text-{{ color_scheme }} underline-offset-2 hover:underline"
              hx-boost="true"
              hx-push-url="true"
              hx-target="#results"
              hx-select="#results"
              hx-swap="outerHTML"
            >
              {{ 'sections.collection.filters.clear_all' | t }}
            </a>
          </div>
        </div>
      {% endif %}
    </div>
  </section>
</filter-drawer-root>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize price sliders on DOM load
    if (window.initPriceSliders) {
      window.initPriceSliders();
    }
  });

  document.addEventListener('htmx:afterSwap', function () {
    const params = new URLSearchParams(window.location.search);

    document.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
      const paramName = checkbox.name;
      const paramValue = checkbox.value;

      if (!params.has(paramName) || !params.getAll(paramName).includes(paramValue)) {
        checkbox.checked = false;
      }
    });

    const results = document.querySelector('#results');

    if (results) {
      results.classList.add('opacity-20');
    }

    if (window.initPriceSliders) {
      window.initPriceSliders();
    }
  });

  document.addEventListener('htmx:oobAfterSwap', (event) => {
    const element = event.target;

    if (element.id === 'filter-form-bar' && window.filters) {
      window.filters();
    }
  });

  document.body.addEventListener('htmx:beforeRequest', function (event) {
    const results = document.querySelector('#results');

    if (results) {
      results.classList.add('opacity-20');
    }
  });

  document.addEventListener('htmx:configRequest', (event) => {
    if (window.onHtmxConfigRequest) {
      window.onHtmxConfigRequest(event);
    }
  });
</script>

{{ 'filter.js' | asset_url | script_tag }}

{% style %}
  .filter-section {
    border-bottom: 1px solid #e5e5e5;
  }

  .filter-section:first-child {
    margin-top: 2.6rem;
  }

  .filter-section:last-child {
    border-bottom: none;
  }

  .filter-section[open] summary ion-icon {
    transform: rotate(180deg);
  }

  .filter-section .filter-options {
    padding-bottom: 1.5rem;
  }

  .filter-drawer-title {
    font-size: 18px;
    font-weight: 500;
    line-height: 24px;
  }

  .filter-title {
    font-size: 16px;
    font-weight: 600;
    line-height: 20px;
  }

  .price-slider {
    margin-top: 1rem !important;
  }

  input[type='checkbox'] {
    width: 18px;
    height: 18px;
    border-radius: 2px;
    appearance: none;
    background-color: #fff;
    display: inline-block;
    cursor: pointer;
    border: 1px solid #222222;
    position: relative;
  }

  input[type='checkbox']:checked {
    background-color: #222222;
    border-color: #222222;
  }

  input[type='checkbox']:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 12px;
    height: 8px;
    border: 2px solid #fff;
    border-top: 0;
    border-right: 0;
    transform: translate(-50%, -65%) rotate(-45deg);
  }

  input[type='checkbox']:disabled {
    background-color: #e5e5e5;
    border-color: #e5e5e5;
    cursor: not-allowed;
  }

  .filter-checkbox-height {
    height: 3.6rem;
  }

  .filter-count-badge {
    background-color: #f3f4f6;
    width: 2.4rem;
    height: 2.4rem;
    border-radius: 0.4rem;
    font-size: 1.2rem;
    line-height: 1.6rem;
    color: #757575;
    display: flex;
    align-items: center;
    justify-content: center;
  }
{% endstyle %}
