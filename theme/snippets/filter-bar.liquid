{%- liquid
  assign color_scheme = color_scheme
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign request_path = request.path
-%}

<filter-drawer-root class="text-{{ color_scheme }}">
  <!-- Desktop Sort Control -->
  {% if results.sort_options.size > 0 %}
    <div class="flex items-center justify-between mb-16">
      <button
        data-trigger="filter-drawer"
        type="button"
        aria-expanded="false"
        class="inline-block text-title-small font-display"
      >
        <span class="flex gap-8 items-center">
          {{- 'filter-sort-icon.svg' | inline_asset_content -}}
          {{ 'sections.collection.filters.filter_and_sort' | t -}}
        </span>
      </button>

      <div class="relative flex">
        <div class="group items-center gap-1 text-sm hidden md:flex">
          <select
            name="sort_by"
            id="sort-control"
            class="text-body-medium font-display rounded border-none outline-none text-{{ color_scheme }} bg-{{ color_scheme }}"
            hx-get="{{ request_path }}"
            hx-trigger="change"
            hx-target="#results"
            hx-select="#results"
            hx-swap="outerHTML"
            hx-include="[name^='filter_'], [name='price_min'], [name='price_max']"
          >
            {% for option in results.sort_options %}
              <option
                value="{{ option.value }}"
                {% if option.value == sort_by %}
                  selected
                {% endif %}
              >
                {{ option.name }}
              </option>
            {% endfor %}
          </select>
        </div>
      </div>
    </div>
  {% else %}
    <button
      data-trigger="filter-drawer"
      type="button"
      aria-expanded="false"
      class="inline-block text-title-small font-display"
    >
      <span class="flex gap-8 items-center">
        {{- 'filter-sort-icon.svg' | inline_asset_content -}}
        {{ 'sections.collection.filters.filter_and_sort' | t -}}
      </span>
    </button>
  {% endif %}

  <!-- Filter Drawer -->
  {% render 'filter-drawer', results: results, color_scheme: color_scheme %}

  <!-- Active filters -->
  <section aria-labelledby="filter-heading">
    <h2 id="filter-heading" class="sr-only">{{ 'sections.collection.filters.filters' | t }}</h2>

    <!-- Active filter list -->
    {% liquid
      assign active_filter_count = 0
      assign active_price_range = false
      for filter in results.filters
        if filter.type == 'price_range'
          if filter.min_value.value or filter.max_value.value
            assign active_filter_count = active_filter_count | plus: 1
            assign active_price_range = true
          endif
        else
          if filter.active_values.size > 0
            assign active_filter_count = active_filter_count | plus: 1
          endif
        endif
      endfor
    %}

    <div id="active-filters" hx-swap-oob="true" hx-swap="innerHTML">
      {% if active_filter_count > 0 %}
        <div class="bg-{{ color_scheme }} py-12 sm:flex sm:justify-between sm:items-center">
          <span class="sr-only">{{ 'sections.collection.filters.active' | t }}</span>
          <div class="-m-4 flex flex-wrap items-center">
            {% for filter in results.filters %}
              {% if filter.type == 'price_range' %}
                {% if active_price_range %}
                  {% render 'filter-tag', filter: filter, color_scheme: color_scheme %}
                {% endif %}
              {% else %}
                {% for value in filter.active_values %}
                  {% render 'filter-tag', filter: filter, value: value, color_scheme: color_scheme %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          </div>
          <div class="clear-all">
            <button
              type="button"
              class="text-{{ color_scheme }} underline underline-offset-2 clear-all-button bg-transparent border-0 cursor-pointer"
              onclick="window.clearAllFilters()"
            >
              {{ 'sections.collection.filters.clear_all' | t }}
            </button>
          </div>
        </div>
      {% else %}
        <!-- Empty state to ensure out-of-band swap works -->
        <div style="display: none;"></div>
      {% endif %}
    </div>
  </section>
</filter-drawer-root>

<script>
  let filterInitialized = false;

  function initializeFilters() {
    if (filterInitialized) {
      return;
    }
    filterInitialized = true;

    document.addEventListener('htmx:afterSwap', handleAfterSwap);
    document.body.addEventListener('htmx:beforeRequest', handleBeforeRequest);
    document.addEventListener('htmx:afterRequest', handleAfterRequest);
    document.addEventListener('htmx:configRequest', handleConfigRequest);
    document.addEventListener('priceSliderChanged', handlePriceSliderChange);
  }

  function handleAfterSwap(event) {
    updateOpacity(false);

    if (window.initPriceSliders) {
      window.initPriceSliders();
    }

    if (window.updatePriceSliders) {
      window.updatePriceSliders();
    }

    // Call the global updateFilterCounts function
    if (window.updateFilterCounts) {
      window.updateFilterCounts();
    }

    setTimeout(() => {
      const filterForm = document.querySelector('#filter-form-stack');
      if (filterForm) {
        const activeFilters = document.querySelector('#active-filters');
        const checkedBoxes = filterForm.querySelectorAll('input[type="checkbox"]:checked');
        const activeFilterTags = activeFilters?.querySelectorAll('.m-1.inline-flex');

        if (checkedBoxes.length > 0 && activeFilterTags && activeFilterTags.length === 0) {
          htmx.trigger(filterForm, 'change');
        }
      }
    }, 100);
  }

  function handleBeforeRequest(event) {
    updateOpacity(true);
  }

  function handleAfterRequest(event) {
    updateOpacity(false);
  }

  function handleConfigRequest(event) {
    if (window.onHtmxConfigRequest) {
      window.onHtmxConfigRequest(event);
    }

    const form = event.target.closest('form');
    if (!form || form.id !== 'filter-form-stack') return;

    Object.keys(event.detail.parameters).forEach((key) => {
      if (key.endsWith('_all')) {
        delete event.detail.parameters[key];
      }
    });
  }

  function updateOpacity(loading) {
    const results = document.querySelector('#results');
    if (results) {
      if (loading) {
        results.classList.add('opacity-20');
      } else {
        results.classList.remove('opacity-20');
      }
    }
  }

  function handleCheckboxChange(event) {
    const checkbox = event.target;

    if (checkbox.type !== 'checkbox' || !checkbox.closest('#filter-form-stack')) {
      return;
    }

    if (window.updateFilterCounts) {
      window.updateFilterCounts();
    }

    // Trigger form change immediately when checkbox changes
    const filterForm = document.querySelector('#filter-form-stack');
    if (filterForm) {
      htmx.trigger(filterForm, 'change');
    }
  }

  function handlePriceSliderChange() {
    updateOpacity(true);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
</script>
