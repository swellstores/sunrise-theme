{%- liquid
  assign color_scheme = color_scheme
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign request_path = results.url | default: request.path
-%}

<filter-drawer-root class="text-{{ color_scheme }}">
  <!-- Desktop Sort Control -->
  {% if results.sort_options.size > 0 %}
    <div class="flex items-center justify-between mb-16">
      <button
        data-trigger="filter-drawer"
        type="button"
        aria-expanded="false"
        class="inline-block text-title-small font-display"
      >
        <span class="flex gap-8 items-center">
          {{- 'filter-sort-icon.svg' | inline_asset_content -}}
          {{ 'sections.collection.filters.filter_and_sort' | t -}}
        </span>
      </button>

      <div class="relative flex">
        <div class="group items-center gap-1 text-sm hidden md:flex">
          <select
            name="sort_by"
            id="sort-control"
            class="text-body-medium font-display rounded border-none outline-none text-{{ color_scheme }} bg-{{ color_scheme }}"
            hx-get="{{ request_path }}"
            hx-trigger="change"
            hx-target="#results"
            hx-select="#results"
            hx-swap="outerHTML"
            hx-include="[name^='filter_'], [name='price_min'], [name='price_max']"
          >
            {% for option in results.sort_options %}
              <option
                value="{{ option.value }}"
                {% if option.value == sort_by %}
                  selected
                {% endif %}
              >
                {{ option.name }}
              </option>
            {% endfor %}
          </select>
        </div>
      </div>
    </div>
  {% else %}
    <button
      data-trigger="filter-drawer"
      type="button"
      aria-expanded="false"
      class="inline-block text-title-small font-display"
    >
      <span class="flex gap-8 items-center">
        {{- 'filter-sort-icon.svg' | inline_asset_content -}}
        {{ 'sections.collection.filters.filter_and_sort' | t -}}
      </span>
    </button>
  {% endif %}

  <!-- Filter drawer -->
  <div
    data-target="filter-drawer"
    class="fixed top-0 left-0 h-full w-340 lg:w-400 bg-white -translate-x-full transition-transform duration-300 ease-in-out shadow-lg"
    style="z-index: 100001"
    role="dialog"
    aria-modal="true"
    aria-expanded="false"
  >
    <div class="flex flex-col h-full">
      <!-- Header -->
      <div class="flex items-center justify-between p-24 border-b border-gray-200">
        <h3 class="font-display filter-drawer-title">{{ 'sections.collection.filters.filters' | t }}</h3>
        <button
          data-trigger="filter-drawer"
          type="button"
          class="flex h-40 items-center justify-center"
        >
          <span class="sr-only">{{ 'sections.collection.filters.close' | t }}</span>
          <ion-icon name="close" aria-hidden="true" class="w-24 h-24"></ion-icon>
        </button>
      </div>

      <!-- Filters Form -->
      <form
        id="filter-form-stack"
        class="flex-1 overflow-y-auto"
        hx-get="{{ request_path }}"
        hx-trigger="change"
        hx-target="#results"
        hx-select="#results"
        hx-swap="outerHTML"
        hx-sync="this:replace"
      >
        <div class="p-24">
          {% for filter in results.filters %}
            <accordion-root class="filter-section">
              <accordion-trigger
                role="button"
                aria-expanded="true"
                class="flex items-center justify-between pt-[18px] pb-[12px] cursor-pointer"
              >
                <h4 class="filter-title font-display">{{ filter.label }}</h4>
                <ion-icon
                  name="chevron-down-outline"
                  aria-label="{{ 'general.accordion.toggle' | t }}"
                  class="h-20 w-20 transition-transform"
                ></ion-icon>
              </accordion-trigger>
              <accordion-content
                role="region"
                class="grid grid-rows-[1fr] opacity-100 overflow-hidden transition-all duration-300 ease-in-out"
              >
                {% if filter.type == 'price_range' %}
                  <div class="overflow-hidden">
                    <div class="filter-options px-4">
                      {% render 'filter-input', filter: filter %}
                    </div>
                  </div>
                {% else %}
                  <div class="overflow-hidden">
                    <div class="filter-options">
                      {% if filter.type == 'list' %}
                        <div class="flex flex-col gap-4">
                          {% for option in filter.values %}
                            {% render 'filter-input', filter: filter, option: option %}
                          {% endfor %}
                        </div>
                      {% else %}
                        {% render 'filter-input', filter: filter %}
                      {% endif %}
                    </div>
                  </div>
                {% endif %}
              </accordion-content>
            </accordion-root>
          {% endfor %}
        </div>
      </form>

      <!-- Add submit button as fallback -->
      <div class="p-24">
        <button
          type="button"
          class="w-full py-12 px-24 bg-black text-white text-body-large font-display"
          onclick="closeFilterDrawerAndSubmit(event)"
        >
          View results
        </button>
      </div>
    </div>
  </div>

  <!-- Active filters -->
  <section aria-labelledby="filter-heading">
    <h2 id="filter-heading" class="sr-only">{{ 'sections.collection.filters.filters' | t }}</h2>

    <!-- Active filter list -->
    {% liquid
      assign active_filter_count = 0
      assign active_price_range = false
      for filter in results.filters
        if filter.type == 'price_range'
          if filter.min_value.value or filter.max_value.value
            assign active_filter_count = active_filter_count | plus: 1
            assign active_price_range = true
          endif
        else
          if filter.active_values.size > 0
            assign active_filter_count = active_filter_count | plus: 1
          endif
        endif
      endfor
    %}

    <div id="active-filters" hx-swap-oob="true">
      {% if active_filter_count > 0 %}
        <div class="bg-{{ color_scheme }} py-12 sm:flex sm:justify-between sm:items-center">
          <span class="sr-only">{{ 'sections.collection.filters.active' | t }}</span>
          <div class="-m-4 flex flex-wrap items-center">
            {% for filter in results.filters %}
              {% if filter.type == 'price_range' %}
                {% if active_price_range %}
                  {% render 'filter-tag', filter: filter, color_scheme: color_scheme %}
                {% endif %}
              {% else %}
                {% for value in filter.active_values %}
                  {% render 'filter-tag', filter: filter, value: value, color_scheme: color_scheme %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          </div>
          <div class="clear-all">
            <a
              href="{{ results.url }}"
              class="text-{{ color_scheme }} underline-offset-2 hover:underline"
              hx-boost="true"
              hx-push-url="true"
              hx-target="#results"
              hx-select="#results"
              hx-swap="outerHTML"
              onclick="clearAllCheckboxes()"
            >
              {{ 'sections.collection.filters.clear_all' | t }}
            </a>
          </div>
        </div>
      {% else %}
        <!-- Empty state to ensure out-of-band swap works -->
        <div style="display: none;"></div>
      {% endif %}
    </div>
  </section>
</filter-drawer-root>

<script>
  let filterInitialized = false;

  function initializeFilters() {
    if (filterInitialized) return;
    filterInitialized = true;

    document.addEventListener('htmx:afterSwap', handleAfterSwap);
    document.body.addEventListener('htmx:beforeRequest', handleBeforeRequest);
    document.addEventListener('htmx:afterRequest', handleAfterRequest);
    document.addEventListener('htmx:configRequest', handleConfigRequest);
    document.addEventListener('priceSliderChanged', handlePriceSliderChange);
    document.addEventListener('change', handleCheckboxChange);
  }

  function handleAfterSwap(event) {
    updateOpacity(false);

    if (window.initPriceSliders) {
      window.initPriceSliders();
    }
  }

  function handleBeforeRequest(event) {
    updateOpacity(true);
  }

  function handleAfterRequest(event) {
    updateOpacity(false);
  }

  function handleConfigRequest(event) {
    if (window.onHtmxConfigRequest) {
      window.onHtmxConfigRequest(event);
    }

    const form = event.target.closest('form');
    if (!form || form.id !== 'filter-form-stack') return;

    Object.keys(event.detail.parameters).forEach((key) => {
      if (key.endsWith('_all')) {
        delete event.detail.parameters[key];
      }
    });
  }

  function clearAllCheckboxes() {
    const filterForm = document.querySelector('#filter-form-stack');
    if (!filterForm) return;

    const checkboxes = filterForm.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach((checkbox) => {
      checkbox.checked = false;
    });
  }

  function updateOpacity(loading) {
    const results = document.querySelector('#results');
    if (results) {
      if (loading) {
        results.classList.add('opacity-20');
      } else {
        results.classList.remove('opacity-20');
      }
    }
  }

  function handleCheckboxChange(event) {
    const checkbox = event.target;

    if (checkbox.type !== 'checkbox' || !checkbox.closest('#filter-form-stack')) {
      return;
    }

    // Trigger form change immediately when checkbox changes
    const filterForm = document.querySelector('#filter-form-stack');
    if (filterForm) {
      htmx.trigger(filterForm, 'change');
    }
  }

  function handlePriceSliderChange() {
    updateOpacity(true);
  }

  function closeFilterDrawerAndSubmit(event) {
    const filterDrawerRoot = document.querySelector('filter-drawer-root');
    if (filterDrawerRoot && filterDrawerRoot.close) {
      filterDrawerRoot.close();
    }

    const form = document.querySelector('#filter-form-stack');
    if (form) {
      htmx.trigger(form, 'change');
    }

    event.preventDefault();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
</script>

{% style %}
  .filter-section:first-child accordion-trigger {
    padding-top: 16px;
  }

  .filter-section accordion-trigger ion-icon {
    transition: transform 0.3s ease;
    transform: rotate(-90deg) !important;
  }

  .filter-section accordion-trigger[aria-expanded='true'] ion-icon {
    transform: rotate(0deg) !important;
  }

  .filter-drawer-title {
    font-size: 1.8rem;
    font-weight: 600;
    line-height: 2.4rem;
  }

  .filter-title {
    font-size: 1.6rem;
    font-weight: 600;
    line-height: 2rem;
  }

  input[type='checkbox'] {
    width: 1.6rem;
    height: 1.6rem;
    border-radius: 0.2rem;
    appearance: none;
    background-color: #fff;
    display: inline-block;
    cursor: pointer;
    border: 0.1rem solid #222222;
    position: relative;
  }

  input[type='checkbox']:checked {
    background-color: #222222;
    border-color: #222222;
  }

  input[type='checkbox']:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0.8rem;
    height: 0.4rem;
    border: 0.1rem solid #fff;
    border-top: 0;
    border-right: 0;
    transform: translate(-50%, -65%) rotate(-45deg);
  }

  input[type='checkbox']:disabled {
    background-color: #e5e5e5;
    border-color: #e5e5e5;
    cursor: not-allowed;
  }

  .filter-checkbox {
    margin-top: 0.2rem;
    margin-bottom: 0.2rem;
  }

  .filter-count-badge {
    background-color: #f3f4f6;
    width: 2.4rem;
    height: 2.4rem;
    border-radius: 0.4rem;
    font-size: 1.2rem;
    line-height: 1.6rem;
    color: #757575;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  ion-icon {
    stroke-width: 0 !important;
  }
{% endstyle %}
