{%- liquid
  assign color_scheme = color_scheme
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign request_path = request.path | default: '#'
-%}

<div class="text-{{ color_scheme }}">
  <button
    data-trigger="filter-drawer"
    type="button"
    aria-expanded="false"
    class="inline-block text-title-small font-display"
  >
    <span class="flex gap-8 items-center">
      {{- 'filter-sort-icon.svg' | inline_asset_content -}}
      {{ 'sections.collection.filters.filter_and_sort' | t -}}
    </span>
  </button>

  <!--
    Mobile filter dialog

    Off-canvas filters for mobile, show/hide based on off-canvas filters state.
  -->
  <div
    data-target="filter-drawer"
    class="fixed top-0 left-0 h-full w-340 lg:w-400 bg-{{ color_scheme }} hidden"
    style="z-index: 5000"
    role="dialog"
    aria-modal="true"
    aria-expanded="false"
  >
    <div class="flex flex-col h-full p-24">
      <div class="flex items-center justify-between mb-48">
        <h3 class="font-display text-headline-medium">{{ 'sections.collection.filters.filters' | t }}</h3>
        <button
          data-trigger="filter-drawer"
          type="button"
          class="flex h-40 w-40 items-center justify-center rounded-md p-8"
        >
          <span class="sr-only">{{ 'sections.collection.filters.close' | t }}</span>
          <svg
            class="h-24 w-24"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Filters -->
      <form
        id="filter-form-stack"
        hx-get="{{ request_path }}"
        hx-trigger="change from:(#filter-form-stack input)"
        hx-on="htmx:configRequest: updateSortFilters(event)"
        hx-target="#results"
        hx-select="#results"
        hx-swap="outerHTML"
        hx-swap-oob="true"
        class="flex-1 overflow-y-auto"
      >
        {% for filter in results.filters %}
          <details class="border-t py-8" open>
            <summary class="flex items-center justify-between py-8 list-none cursor-pointer">
              <h4 class="text-title-small font-display">
                {{ filter.label }}
              </h4>
              <svg
                class="-mr-4 ml-4 h-20 w-20 flex-shrink-0"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                  clip-rule="evenodd" />
              </svg>
            </summary>
            <fieldset class="flex flex-col">
              {% if filter.type == 'list' %}
                <div class="flex flex-col">
                  {% for option in filter.values %}
                    {% render 'filter-input', filter: filter, option: option %}
                  {% endfor %}
                </div>
              {% else %}
                {% render 'filter-input', filter: filter %}
              {% endif %}
            </fieldset>
          </details>
        {% endfor %}

        <!-- Sort-By Controls -->
        <details class="border-t py-8" open>
          <summary class="flex items-center justify-between py-8 list-none cursor-pointer">
            <h4 class="text-title-small font-display">
              {{ 'sections.collection.filters.sort_by' | t }}
            </h4>
            <svg
              class="-mr-4 ml-4 h-20 w-20 flex-shrink-0"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fill-rule="evenodd"
                d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                clip-rule="evenodd" />
            </svg>
          </summary>
          <fieldset class="flex flex-col">
            {% for option in results.sort_options %}
              <div class="flex items-center flex-nowrap h-40">
                <input
                  type="radio"
                  id="sort-option-{{ forloop.index }}"
                  name="sort_by"
                  value="{{ option.value }}"
                  class="border-color-{{ color_scheme }} h-16 w-16 mr-8 rounded border-gray-300 text-orange-600 cursor-pointer focus:ring-orange-600"
                  {% if option.value == sort_by %}
                    checked
                  {% endif %}
                >
                <label
                  for="sort-option-{{ forloop.index }}"
                  class="text-body-medium font-display cursor-pointer"
                >
                  {{ option.name }}
                </label>
              </div>
            {% endfor %}
          </fieldset>
        </details>
      </form>
    </div>
  </div>

  <!-- Active filters -->
  <section aria-labelledby="filter-heading">
    <h2 id="filter-heading" class="sr-only">{{ 'sections.collection.filters.filters' | t }}</h2>

    <!-- Active filter list -->
    {% liquid
      assign active_filter_count = 0
      assign active_price_range = false
      for filter in results.filters
        if filter.type == 'price_range'
          if filter.min_value.value or filter.max_value.value
            assign active_filter_count = active_filter_count | plus: 1
            assign active_price_range = true
          endif
        else
          if filter.active_values.size > 0
            assign active_filter_count = active_filter_count | plus: 1
          endif
        endif
      endfor
    %}

    <div id="active-filters" hx-swap-oob="true">
      {% if active_filter_count > 0 %}
        <div class="bg-{{ color_scheme }} py-12 sm:flex sm:justify-between sm:items-center">
          <span class="sr-only">{{ 'sections.collection.filters.active' | t }}</span>
          <div class="-m-4 flex flex-wrap items-center">
            {% for filter in results.filters %}
              {% if filter.type == 'price_range' %}
                {% if active_price_range %}
                  {% render 'filter-tag', filter: filter, color_scheme: color_scheme %}
                {% endif %}
              {% else %}
                {% for value in filter.active_values %}
                  {% render 'filter-tag', filter: filter, value: value, color_scheme: color_scheme %}
                {% endfor %}
              {% endif %}
            {% endfor %}
          </div>
          <div class="clear-all">
            <a
              href="{{ results.url }}"
              class="text-{{ color_scheme }} underline-offset-2 hover:underline"
              hx-boost="true"
              hx-push-url="true"
              hx-target="#results"
              hx-select="#results"
              hx-swap="outerHTML"
            >
              {{ 'sections.collection.filters.clear_all' | t }}
            </a>
          </div>
        </div>
      {% endif %}
    </div>
  </section>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterDrawer = document.querySelector('[data-target="filter-drawer"]');
    const header = document.querySelector('header');
    const announcement = document.querySelector('announcement-root');
    const searchDialog = document.querySelector('search-dialog-root');

    // Override the original onClickFilterDrawer function
    window.onClickFilterDrawer = function() {
      const target = document.querySelector('[data-target="filter-drawer"]');
      const isExpanded = target.getAttribute("aria-expanded") === "true";
      
      // Toggle drawer
      target.setAttribute("aria-expanded", !isExpanded);
      target.classList.toggle("hidden");
      
      // Update z-index of other components
      if (header) {
        header.classList.toggle('z-60');
        header.classList.toggle('z-10');
      }
      
      if (announcement) {
        announcement.classList.toggle('z-60');
        announcement.classList.toggle('z-10');
      }
      
      if (searchDialog) {
        searchDialog.classList.toggle('z-50');
      }
    };
  });

  document.addEventListener('htmx:afterSwap', function () {
    const params = new URLSearchParams(window.location.search);

    document.querySelectorAll('input[type="checkbox"]').forEach((checkbox) => {
      const paramName = checkbox.name;
      const paramValue = checkbox.value;

      if (!params.has(paramName) || !params.getAll(paramName).includes(paramValue)) {
        checkbox.checked = false;
      }
    });

    const results = document.querySelector('#results');

    if (results) {
      results.classList.add('opacity-20');
    }
  });

  document.addEventListener('htmx:oobAfterSwap', (event) => {
    const element = event.target;

    if (element.id === 'filter-form-bar' && window.filters) {
      window.filters();
    }
  });

  document.body.addEventListener('htmx:beforeRequest', function (event) {
    const results = document.querySelector('#results');

    if (results) {
      results.classList.add('opacity-20');
    }
  });

  document.addEventListener('htmx:configRequest', (event) => {
    if (window.onHtmxConfigRequest) {
      window.onHtmxConfigRequest(event);
    }
  });
</script>

{{ 'filter.js' | asset_url | script_tag }}

{% style %}
  input[type='checkbox'] {
    width: 2rem;
    height: 2rem;
    border-radius: 0.2rem;
    appearance: none;
    background-color: #fff;
    display: inline-block;
    cursor: pointer;
    border: 1px solid #222222;
    position: relative;
  }

  input[type='checkbox']:disabled {
    background-color: #e0e0e0;
    border: 1px solid #bdbdbd;
    cursor: not-allowed;
    opacity: 0.6;
  }

  input[type='checkbox']:checked {
    background-color: #3b0b93;
    border-color: #3b0b93;
  }

  input[type='checkbox']:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 1.2rem;
    height: 0.7rem;
    background-image: url('{{ 'checkbox-icon.svg' | asset_url }}');
    background-repeat: no-repeat;
    background-size: contain;
    transform: translate(-50%, -50%);
  }

  input[type='radio'] {
    width: 2.2rem;
    height: 2.2rem;
    border-radius: 50%;
    appearance: none;
    background-color: #fff;
    cursor: pointer;
    border: 1px solid #222222;
    position: relative;
  }

  input[type='radio']:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 1.2rem;
    height: 1.2rem;
    background-color: #3b0b93;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }
{% endstyle %}
