{%- liquid
  assign color_scheme = color_scheme | default: 'scheme-1'
  assign request_path = request.path
  if is_sidebar
    assign form_id = 'filter-form-sidebar'
  else
    assign form_id = 'filter-form-drawer'
  endif
-%}

<!-- Filters Form -->
<form
  id="{{ form_id }}"
  class="h-full"
  hx-get="{{ request_path }}"
  hx-trigger="change delay:300ms"
  hx-target="#results-sidebar, #results-drawer"
  hx-select="#results-sidebar, #results-drawer"
  hx-swap="outerHTML"
  hx-sync="this:replace"
>
  <div class="p-24 lg:p-0">
    {% for filter in results.filters %}
      <accordion-root class="filter-section">
        <accordion-item aria-expanded="false">
          <accordion-trigger
            role="button"
            class="flex items-center justify-between accordion-trigger pb-[12px] cursor-pointer"
          >
            <h4 class="filter-title font-display text-{{ color_scheme }}">
              {{ filter.label }}
              <span class="filter-count" data-filter-param="{{ filter.param_name }}"></span>
            </h4>
            <ion-icon
              name="chevron-down-outline"
              aria-label="{{ 'general.accordion.toggle' | t }}"
              class="h-20 w-20 transition-transform"
            ></ion-icon>
          </accordion-trigger>
          <accordion-content>
            {% if filter.type == 'price_range' %}
              <div class="overflow-hidden">
                <div class="filter-options px-4">
                  {% render 'filter-input', filter: filter, color_scheme: color_scheme %}
                </div>
              </div>
            {% else %}
              <div class="overflow-hidden">
                <div class="filter-options">
                  {% if filter.type == 'list' %}
                    <div class="flex flex-col gap-8">
                      {% for option in filter.values %}
                        {% render 'filter-input', filter: filter, option: option, color_scheme: color_scheme %}
                      {% endfor %}
                    </div>
                  {% else %}
                    {% render 'filter-input', filter: filter, color_scheme: color_scheme %}
                  {% endif %}
                </div>
              </div>
            {% endif %}
          </accordion-content>
        </accordion-item>
      </accordion-root>
    {% endfor %}
  </div>
</form>

{% style %}
  /* Disable accordion content animations for filter panel */
  .filter-section accordion-content {
    transition: none !important;
    animation: none !important;
  }

  .filter-section accordion-trigger ion-icon {
    transition: transform 0.3s ease;
    transform: rotate(0deg);
  }

  .filter-section accordion-item[aria-expanded='false'] accordion-trigger ion-icon {
    transform: rotate(-90deg);
  }

  .filter-title {
    font-size: 1.4rem;
    font-weight: 600;
    line-height: 1.8rem;
  }

  .filter-options label {
    font-size: 1.4rem;
    line-height: 1.8rem;
  }

  .filter-section:not(:first-child) accordion-trigger {
    padding-top: 1.8rem;

    @media (max-width: 1024px) {
      padding-top: 2.4rem;
    }
  }

  .bg-{{ color_scheme }} input[type='checkbox'] {
    width: 1.6rem;
    height: 1.6rem;
    border-radius: 0.2rem;
    appearance: none;
    background-color: var(--color-{{ color_scheme }}-background);
    border: 0.1rem solid var(--color-{{ color_scheme }}-borders-and-inputs);
    display: inline-block;
    cursor: pointer;
    position: relative;
  }

  .bg-{{ color_scheme }} input[type='checkbox']:checked {
    background-color: var(--color-{{ color_scheme }}-text);
    border-color: var(--color-{{ color_scheme }}-text);
  }

  .bg-{{ color_scheme }} input[type='checkbox']:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0.8rem;
    height: 0.4rem;
    border: 0.1rem solid var(--color-{{ color_scheme }}-background);
    border-top: 0;
    border-right: 0;
    transform: translate(-50%, -65%) rotate(-45deg);
  }

  .bg-{{ color_scheme }} input[type='checkbox']:disabled {
    background-color: var(--color-{{ color_scheme }}-text-secondary);
    border-color: var(--color-{{ color_scheme }}-text-secondary);
    cursor: not-allowed;
    opacity: 0.6;
  }

  .filter-checkbox {
    margin-top: 0.2rem;
    margin-bottom: 0.2rem;
  }

  .filter-count-badge {
    width: 2.4rem;
    height: 2.4rem;
    border-radius: 0.4rem;
    font-size: 1.2rem;
    line-height: 1.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .clear-all-button {
    text-decoration: underline;
    text-underline-offset: 0.2rem;
  }

  ion-icon {
    stroke-width: 0 !important;
  }
{% endstyle %}

<script>
  if (window.updateFilterCounts) {
    window.updateFilterCounts();
  }

  document.addEventListener('htmx:afterRequest', function (event) {
    if (event.detail.elt.id === 'filter-form-sidebar' || event.detail.elt.id === 'filter-form-drawer') {
      if (window.updateFilterCounts) {
        window.updateFilterCounts();
      }
    }
  });

  window.updateFilterCounts = function () {
    const isMobile = window.innerWidth < 1024;
    let visibleContainer, filterForm;

    if (isMobile) {
      visibleContainer = document.querySelector('filter-drawer-root');
      if (visibleContainer) {
        filterForm = visibleContainer.querySelector('#filter-form-drawer');
      }
    } else {
      visibleContainer = document.querySelector('#filter-sidebar');
      if (visibleContainer) {
        filterForm = visibleContainer.querySelector('#filter-form-sidebar');
      }
    }

    if (!visibleContainer || !filterForm) {
      return;
    }

    const countSpans = visibleContainer.querySelectorAll('.filter-count');
    let totalActiveFilters = 0;

    countSpans.forEach((span) => {
      const filterParam = span.getAttribute('data-filter-param');
      if (!filterParam) return;

      const priceRange = filterForm.querySelector(`#price-range[data-input-name="${filterParam}"]`);

      if (priceRange) {
        span.textContent = '';

        const sliderTrack = priceRange.querySelector('.slider-track');
        if (sliderTrack && sliderTrack.noUiSlider) {
          const values = sliderTrack.noUiSlider.get();
          const min = parseFloat(priceRange.dataset.min) || 0;
          const max = parseFloat(priceRange.dataset.max) || 1000;

          if (values[0] > min || values[1] < max) {
            totalActiveFilters += 1;
          }
        }
        return;
      }

      const checkboxes = filterForm.querySelectorAll(`input[name="${filterParam}"]:checked`);
      const count = checkboxes.length;

      if (count > 0) {
        span.textContent = `(${count})`;
        totalActiveFilters += count;
      } else {
        span.textContent = '';
      }
    });

    const clearAllCount = visibleContainer.querySelector('#clear-all-count');
    if (clearAllCount) {
      if (totalActiveFilters > 0) {
        clearAllCount.textContent = `(${totalActiveFilters})`;
      } else {
        clearAllCount.textContent = '';
      }
    }
  };

  window.clearAllFilters = function () {
    // Determine which form to use based on screen size
    const isMobile = window.innerWidth < 1024;
    const activeForm = isMobile
      ? document.querySelector('#filter-form-drawer')
      : document.querySelector('#filter-form-sidebar');

    if (!activeForm) return;

    const filterForms = document.querySelectorAll('#filter-form-sidebar, #filter-form-drawer');
    filterForms.forEach((filterForm) => {
      const checkboxes = filterForm.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach((checkbox) => {
        checkbox.checked = false;
      });
    });

    const priceRanges = document.querySelectorAll('#price-range');
    priceRanges.forEach((priceRange) => {
      const sliderTrack = priceRange.querySelector('.slider-track');
      if (sliderTrack && sliderTrack.noUiSlider) {
        const min = parseFloat(priceRange.dataset.min) || 0;
        const max = parseFloat(priceRange.dataset.max) || 1000;

        sliderTrack.noUiSlider.set([min, max]);

        const inputMin = priceRange.querySelector('input[name$="[gte]"]');
        const inputMax = priceRange.querySelector('input[name$="[lte]"]');
        if (inputMin) inputMin.value = '';
        if (inputMax) inputMax.value = '';
      }
    });

    if (window.updateFilterCounts) {
      window.updateFilterCounts();
    }

    if (window.htmx) {
      window.htmx.trigger(activeForm, 'change');
    } else {
      const changeEvent = new Event('change', { bubbles: true });
      activeForm.dispatchEvent(changeEvent);
    }
  };

  function submitFilterForm(event) {
    const filterDrawerRoot = document.querySelector('filter-drawer-root');
    if (filterDrawerRoot && filterDrawerRoot.close) {
      filterDrawerRoot.close();
    }
    event.preventDefault();
  }
</script>
