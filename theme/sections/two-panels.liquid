{% comment %}
  Renders a two-panel section.

  Usage:
  {% sections 'two-panels' %}
{% endcomment %}

{%- liquid
  assign color_scheme = section.settings.color_scheme
  assign vertical_padding = section.settings.vertical_padding | times: 0.1 | round: 1
  assign horizontal_padding = section.settings.horizontal_padding | times: 0.1 | round: 1
  assign gap = section.settings.gap | times: 0.1 | round: 1
-%}

{% style %}
  .container-padding-{{ section.id }} {
    padding: {{ vertical_padding }}rem {{ horizontal_padding }}rem;
  }

  .section-gap-{{ section.id }} {
    gap: {{ gap }}rem;
  }

  {% for block in section.blocks %}
    {% if block.type == 'content' %}
    .content-padding-{{ section.id }}-{{ block.id }} {
      padding: {{ block.settings.section_padding | times: 0.1 | round: 1 }}rem;
    }
    {% endif %}
  {% endfor %}
{% endstyle %}

<div class="container-padding-{{ section.id }} bg-{{ color_scheme }}">
  <div class="mx-auto grid grid-cols-2 section-gap-{{ section.id }} min-h-200">
    {%- for block in section.blocks -%}
      {%- case block.type -%}
        {%- when 'image' -%}
          {% comment %} Image Column {% endcomment %}
          <div>
            {%- if block.settings.link != blank -%}
              <a href="{{ block.settings.link }}" class="block w-full h-full">
            {%- endif -%}

            {%- if block.settings.image != blank -%}
              {%
                render 'image',
                image: block.settings.image,
                alt: block.settings.image.alt | default: '',
                picture_class: 'svg-placeholder object-fit object-center',
                class: 'object-contain h-full',
                placeholder: 'detailed-apparel-1'
              %}
            {%- else -%}
              <div class="bg-{{ color_scheme }} w-full h-full">
                {{ 'detailed-apparel-1' | placeholder_svg_tag: 'w-full h-full object-cover p-48' }}
              </div>
            {%- endif -%}

            {%- if block.settings.link != blank -%}
              </a>
            {%- endif -%}
          </div>
        {%- when 'content' -%}
          {% comment %} Content Column {% endcomment %}
          {% assign vertical_alignment = block.settings.vertical_alignment %}
          <div
            class="
              flex
              w-full
              h-full
              {% case vertical_alignment %}
                {% when 'top' %}
                  items-start
                {% when 'middle' %}
                  items-center
                {% when 'bottom' %}
                  items-end
              {%- endcase -%}
            "
          >
            <div class="w-full flex flex-col gap-24 bg-{{ block.settings.color_scheme }} text-{{ block.settings.color_scheme }} content-padding-{{ section.id }}-{{ block.id }}">
              <div class="flex flex-col gap-8 text-{{ block.settings.text_alignment }}">
                {%- if block.settings.pre_heading != blank -%}
                  <div class="font-display font-pre-heading text-pre-heading">
                    {{ block.settings.pre_heading | inline_editable: 'pre_heading' }}
                  </div>
                {%- endif -%}

                {%- if block.settings.heading != blank -%}
                  <h2 class="font-display font-heading text-heading-{{ block.settings.heading_size | default: 'small' }}">
                    {{ block.settings.heading | inline_editable: 'heading' }}
                  </h2>
                {%- endif -%}

                {%- if block.settings.text != blank -%}
                  <div class="font-display formatted-text text-content">
                    {{ block.settings.text | inline_editable: 'text' }}
                  </div>
                {%- endif -%}
              </div>

              {%- if block.settings.button_text != blank -%}
                <div class="flex mt-20 {% if block.settings.text_alignment == 'center' %}justify-center{% elsif block.settings.text_alignment == 'right' %}justify-end{% endif %}">
                  {% render 'button',
                    text: block.settings.button_text,
                    href: block.settings.button_link,
                    color_scheme: block.settings.color_scheme
                  %}
                </div>
              {%- endif -%}
            </div>
          </div>
      {%- endcase -%}
    {%- endfor -%}
  </div>
</div>

{% schema %}
{
  "name": "t:sections.two_panels.name",
  "tag": "section",
  "disabled_on": { "groups": ["header", "footer"] },
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "range",
      "id": "vertical_padding",
      "label": "t:sections.all.padding.padding_vertical",
      "min": 0,
      "max": 96,
      "step": 1,
      "unit": "px",
      "default": 32
    },
    {
      "type": "range",
      "id": "horizontal_padding",
      "label": "t:sections.all.padding.padding_horizontal",
      "min": 0,
      "max": 96,
      "step": 1,
      "unit": "px",
      "default": 32
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:sections.two_panels.settings.gap.label",
      "info": "t:sections.two_panels.settings.gap.info",
      "min": 0,
      "max": 32,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "t:sections.two_panels.blocks.image.name",
      "limit": 1,
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "t:sections.two_panels.blocks.image.settings.image.label"
        },
        {
          "type": "url",
          "id": "link",
          "label": "t:sections.two_panels.blocks.image.settings.link.label",
          "info": "t:sections.two_panels.blocks.image.settings.link.info"
        }
      ]
    },
    {
      "type": "content",
      "name": "t:sections.two_panels.blocks.content.name",
      "limit": 1,
      "settings": [
        {
          "type": "inline_richtext",
          "id": "pre_heading",
          "label": "t:sections.all.pre_heading.label"
        },
        {
          "type": "inline_richtext",
          "id": "heading",
          "label": "t:sections.two_panels.blocks.content.settings.heading.label",
          "default": "t:sections.two_panels.blocks.content.settings.heading.default"
        },
        {
          "type": "select",
          "id": "heading_size",
          "label": "t:sections.all.heading_size.label",
          "default": "small",
          "options": [
            { "value": "small", "label": "t:sections.all.heading_size.options__small.label" },
            { "value": "medium", "label": "t:sections.all.heading_size.options__medium.label" },
            { "value": "large", "label": "t:sections.all.heading_size.options__large.label" },
            { "value": "extra-large", "label": "t:sections.all.heading_size.options__extra_large.label" }
          ]
        },
        {
          "type": "richtext",
          "id": "text",
          "label": "t:sections.two_panels.blocks.content.settings.text.label",
          "default": "t:sections.two_panels.blocks.content.settings.text.default"
        },
        {
          "type": "select",
          "id": "text_alignment",
          "label": "t:sections.all.text_alignment.label",
          "default": "center",
          "options": [
            {
              "value": "left",
              "label": "t:sections.all.text_alignment.options__left.label"
            },
            {
              "value": "center",
              "label": "t:sections.all.text_alignment.options__center.label"
            },
            {
              "value": "right",
              "label": "t:sections.all.text_alignment.options__right.label"
            }
          ]
        },
        {
          "type": "select",
          "id": "vertical_alignment",
          "label": "t:sections.two_panels.blocks.content.settings.vertical_alignment.label",
          "default": "middle",
          "options": [
            { "value": "top", "label": "t:sections.two_panels.blocks.content.settings.vertical_alignment.options__top.label" },
            { "value": "middle", "label": "t:sections.two_panels.blocks.content.settings.vertical_alignment.options__middle.label" },
            { "value": "bottom", "label": "t:sections.two_panels.blocks.content.settings.vertical_alignment.options__bottom.label" }
          ]
        },
        {
          "type": "header",
          "content": "t:sections.two_panels.blocks.content.settings.button_header.content"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "t:sections.two_panels.blocks.content.settings.button_text.label",
          "default": "t:sections.two_panels.blocks.content.settings.button_text.default",
          "info": "t:sections.two_panels.blocks.content.settings.button_text.info"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "t:sections.two_panels.blocks.content.settings.button_link.label",
          "info": "t:sections.two_panels.blocks.content.settings.button_link.info"
        },
        {
          "type": "color_scheme",
          "id": "color_scheme",
          "label": "t:sections.all.colors.label",
          "default": "scheme-1"
        },
        {
          "type": "range",
          "id": "section_padding",
          "label": "t:sections.two_panels.blocks.content.settings.section_padding.label",
          "info": "t:sections.two_panels.blocks.content.settings.section_padding.info",
          "min": 0,
          "max": 96,
          "step": 1,
          "unit": "px",
          "default": 32
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "t:sections.two_panels.presets.name",
      "blocks": [
        { "type": "image" },
        { "type": "content" }
      ]
    }
  ]
}
{% endschema %}
